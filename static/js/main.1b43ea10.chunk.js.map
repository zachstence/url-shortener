{"version":3,"sources":["api.ts","components/Shorten/Shorten.tsx","components/Redirect/Redirect.tsx","App/App.tsx","index.tsx"],"names":["api","axios","create","baseURL","process","ENV","add","url","a","post","headers","response","data","get","id","Shorten","useState","setUrl","short","setShort","isError","setIsError","input","useRef","useEffect","current","focus","onSubmit","e","preventDefault","window","location","href","className","htmlFor","type","value","placeholder","onChange","target","ref","Redirect","useParams","redirect","assign","to","App","exact","path","component","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RAEMA,E,OAAMC,EAAMC,OAAO,CACrBC,QAA6B,QAApBC,mIAAYC,IAAZ,uEAGAC,EAAG,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACQR,EAAIS,KAAK,OAAQF,EAAK,CACzCG,QAAS,CACL,eAAgB,gBAHT,cACTC,EADS,yBAMRA,EAASC,MAND,2CAAH,sDASHC,EAAG,uCAAG,WAAOC,GAAP,eAAAN,EAAA,sEACQR,EAAIa,IAAJ,WAAYC,IADpB,cACTH,EADS,yBAERA,EAASC,MAFD,2CAAH,sD,eCyDDG,EA/DW,WACtB,MAAsBC,mBAAiB,IAAvC,mBAAOT,EAAP,KAAYU,EAAZ,KACA,EAA0BD,mBAAiB,IAA3C,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAA8BH,oBAAkB,GAAhD,mBAAOI,EAAP,KAAgBC,EAAhB,KACMC,EAAQC,iBAAyB,MAEvCC,qBAAU,WACFF,EAAMG,SAASH,EAAMG,QAAQC,WAGrC,IAAMC,EAAQ,uCAAG,WAAOC,GAAP,eAAApB,EAAA,6DACboB,EAAEC,iBAEFR,GAAW,GACXF,EAAS,IAJI,kBAOQnB,EAAQO,GAPhB,OAOHO,EAPG,OAQTK,EAAS,GAAD,OAAIW,OAAOC,SAASC,MAApB,OAA2BlB,IAR1B,kDAUTO,GAAW,GAVF,QAaTC,EAAMG,SAASH,EAAMG,QAAQC,QAbpB,0DAAH,sDA8Bd,OACI,sBAAKO,UAAU,UAAf,UACI,mBAAGA,UAAU,eAAb,wEACA,uBAAMN,SAAUA,EAAhB,UACI,sBAAKM,UAAU,cAAf,UACI,uBAAOC,QAAQ,MAAf,iBACA,uBACIpB,GAAG,MACHmB,UAAU,kBACVE,KAAK,OACLC,MAAO7B,EACP8B,YAAY,0CACZC,SAAU,SAAAV,GAAC,OAAIX,EAAOW,EAAEW,OAAOH,QAC/BI,IAAKlB,OAGb,wBAAQa,KAAK,SAAb,wBA7BJf,EACO,mBAAGa,UAAU,QAAb,qDACAf,EAEH,oBAAGe,UAAU,QAAb,iCACwB,mBAAGD,KAAMd,EAAOe,UAAU,QAA1B,SAAmCf,OAIxD,SCDJuB,G,MAjCY,WACvB,MAA8BzB,oBAAkB,GAAhD,mBAAOI,EAAP,KAAgBC,EAAhB,KAEOP,EAAM4B,cAAN5B,GAED6B,EAAQ,uCAAG,4BAAAnC,EAAA,+EAESR,EAAQc,GAFjB,OAEHP,EAFG,OAGTuB,OAAOC,SAASa,OAAOrC,GAHd,gDAKTc,GAAW,GALF,yDAAH,qDAad,OAJAG,qBAAU,WACNmB,OAGAvB,EAEI,qBAAKa,UAAU,WAAf,SACI,sBAAKA,UAAU,QAAf,UACI,uCACA,sBAAKA,UAAU,UAAf,2BAAuC,8BAAMH,OAAOC,SAASC,OAA7D,sBACA,cAAC,IAAD,CAAMC,UAAU,eAAeY,GAAG,IAAlC,+BAKL,OCZAC,G,MAlBO,WAClB,OACI,sBAAKb,UAAU,MAAf,UACI,+BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjC,cAAC,IAAD,CAAOgC,OAAK,EAACC,KAAK,OAAOC,UAAWR,SAG5C,iCACI,mBAAGT,KAAK,8CAAR,SACI,qBAAKkB,IAAI,aAAaC,IAAI,yBChB9CC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,UACI,cAAC,EAAD,QAGRC,SAASC,eAAe,W","file":"static/js/main.1b43ea10.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n    baseURL: process.env.ENV === \"dev\" ? `http://localhost:8081` : `https://zach08-url-shortener.herokuapp.com`\n});\n\nexport const add = async (url: string): Promise<string> => {\n    const response = await api.post(\"/add\", url, {\n        headers: {\n            \"Content-Type\": \"text/plain\"\n        }\n    });\n    return response.data;\n}\n\nexport const get = async (id: string): Promise<string> => {\n    const response = await api.get(`/${id}`);\n    return response.data;\n};","import React, { useEffect, useRef, useState } from 'react';\nimport * as api from '../../api';\n\nimport \"./Shorten.scss\";\n\n/**\n * Renders an input and button to enter a URL to shorten. POSTs an entered URL to the server\n * and shows the shortened URL. Shows an error if the POST fails.\n */\nconst Shorten: React.FC = () => {\n    const [url, setUrl] = useState<string>(\"\");\n    const [short, setShort] = useState<string>(\"\");\n    const [isError, setIsError] = useState<boolean>(false);\n    const input = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        if (input.current) input.current.focus();\n    });\n    \n    const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        \n        setIsError(false);\n        setShort(\"\");\n\n        try {\n            const id = await api.add(url);\n            setShort(`${window.location.href}${id}`);\n        } catch {\n            setIsError(true);\n        }\n\n        if (input.current) input.current.focus();\n    }\n\n    const renderShortOrError = (): JSX.Element | null => {\n        if (isError) {\n            return <p className=\"error\">Error: Malformed URL. Please try again.</p>;\n        } else if (short) {\n            return (\n                <p className=\"short\">\n                    Your shortened URL: <a href={short} className=\"short\">{short}</a>\n                </p>\n            );\n        } else {\n            return null;\n        }\n    };\n\n    return (\n        <div className=\"shorten\">\n            <p className=\"instructions\">Enter a URL you would like to shorten, then click SHORTEN!</p>\n            <form onSubmit={onSubmit}>\n                <div className=\"input-group\">\n                    <label htmlFor=\"url\">URL</label>\n                    <input\n                        id=\"url\"\n                        className=\"gradient-border\"\n                        type=\"text\"\n                        value={url}\n                        placeholder=\"https://www.website.com/with/a/long/url\"\n                        onChange={e => setUrl(e.target.value)}\n                        ref={input}\n                    />\n                </div>\n                <button type=\"submit\">SHORTEN</button>\n            </form>\n            {renderShortOrError()}\n        </div>\n    );\n}\n\nexport default Shorten;\n    ","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport * as api from \"../../api\";\n\nimport \"./Redirect.scss\";\n\n/**\n * GETs the server for a URL matching the given /:id and redirects to it. Shows an error if\n * the GET fails.\n */\nconst Redirect: React.FC = () => {\n    const [isError, setIsError] = useState<boolean>(false);\n\n    const {id} = useParams<{id: string}>();\n\n    const redirect = async (): Promise<void> => {\n        try {\n            const url = await api.get(id);\n            window.location.assign(url);\n        } catch (e) {\n            setIsError(true);\n        }\n    }\n\n    useEffect(() => {\n        redirect();\n    });\n\n    if (isError) {\n        return (\n            <div className=\"redirect\">\n                <div className=\"error\">\n                    <h1>Error</h1>\n                    <div className=\"message\">The short URL <pre>{window.location.href}</pre> does not exist.</div>\n                    <Link className=\"back-to-home\" to=\"/\">Back To Home</Link>\n                </div>\n            </div>\n        );\n    } else {\n        return null;\n    }\n};\n\nexport default Redirect;","import React from \"react\";\nimport {Switch, Route} from \"react-router-dom\";  \nimport Shorten from \"../components/Shorten/Shorten\";\nimport Redirect from \"../components/Redirect/Redirect\";\n\nimport \"./App.scss\";\n\n/**\n * The root component of the app. Renders either Shorten or Redirect based on the current path.\n */\nconst App: React.FC = () => {\n    return (\n        <div className=\"app\">\n            <main>\n                <Switch>\n                    <Route exact path=\"/\" component={Shorten} />\n                    <Route exact path=\"/:id\" component={Redirect} />\n                </Switch>\n            </main>\n            <footer>\n                <a href=\"https://github.com/zachstence/url-shortener\">\n                    <img src=\"github.png\" alt=\"GitHub Icon\"/>\n                </a>\n            </footer>\n        </div>\n    )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}